
P15_CAPTURA_DE_ENTRADA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000418  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006f8  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000186  00000000  00000000  00010b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00010cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00010d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f7f  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c25  00000000  00000000  00011d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee97  00000000  00000000  00012944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a17db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000a182c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003f8 	.word	0x080003f8

08000204 <main>:
 * entre 1 y 0 (0v-3.3v). Por medio de un puente entre PA5 y PA6 capturan los eventos de caombio
 * asendente pormedio de PA6*/

int MarcaTiempo = 0;
/*Conectar PA5 a PA6 fisicamente en la targeta*/
int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	ConfitGPIOA5y6EnModoAlternativos();
 8000208:	f000 f816 	bl	8000238 <ConfitGPIOA5y6EnModoAlternativos>
	tim2_modo_comparacion();
 800020c:	f000 f852 	bl	80002b4 <tim2_modo_comparacion>
	Tim3ModoCapturaEntrada();
 8000210:	f000 f882 	bl	8000318 <Tim3ModoCapturaEntrada>
	while(1){
		/*Valida la vandera CC1IF.*/
		while(!(TIM3->SR & CC1IF));
 8000214:	bf00      	nop
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <main+0x2c>)
 8000218:	691b      	ldr	r3, [r3, #16]
 800021a:	f003 0302 	and.w	r3, r3, #2
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <main+0x12>
		/*Valida la vandera CC1IF. Cuando se detacta un flanco
		 * asendente se activa la bandera CC1IF*/

		/*Leer el valor capturado*/
		MarcaTiempo = TIM3->CCR1;
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <main+0x2c>)
 8000224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000226:	461a      	mov	r2, r3
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <main+0x30>)
 800022a:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & CC1IF));
 800022c:	e7f2      	b.n	8000214 <main+0x10>
 800022e:	bf00      	nop
 8000230:	40000400 	.word	0x40000400
 8000234:	2000001c 	.word	0x2000001c

08000238 <ConfitGPIOA5y6EnModoAlternativos>:
#define GPIOAEN		(1U<<0)
#define CC1S		(1U<<0)
#define CC1E		(1U<<0)


void ConfitGPIOA5y6EnModoAlternativos(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	//1. Habilitar el acceso a reloj al GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <ConfitGPIOA5y6EnModoAlternativos+0x74>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <ConfitGPIOA5y6EnModoAlternativos+0x74>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configure PA5 en modo alternativo*/
	GPIOA -> MODER &=  ~(1U<<10);
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800024e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000252:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=	(1U<<11);
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800025a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800025e:	6013      	str	r3, [r2, #0]

	/*Configura el tipo de funcion alternativo TIMER2_CH1 (AF01),registro AFRL*/
	GPIOA->AFR[0] |=  (1U<<20);
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800026a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= (~(1U<<23)|~(1U<<22)|~(1U<<21));
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000270:	6a1b      	ldr	r3, [r3, #32]
 8000272:	6213      	str	r3, [r2, #32]


	/*Configure PA6 en modo alternativo*/
	GPIOA -> MODER &=  ~(1U<<12);
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800027a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=	(1U<<13);
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028a:	6013      	str	r3, [r2, #0]

	/*Configura el tipo de funcion alternativo TIMER3_CH1 (AF02),registro AFRL*/
	GPIOA->AFR[0] |=  (1U<<25);
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 8000292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= (~(1U<<27)|~(1U<<26)|~(1U<<24));
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <ConfitGPIOA5y6EnModoAlternativos+0x78>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	6213      	str	r3, [r2, #32]

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020000 	.word	0x40020000

080002b4 <tim2_modo_comparacion>:
	/*Habilita el temporizador*/
	TIM2->CR1 |= CR1_CEN;//El registro CR1 es un registro de control
}


void tim2_modo_comparacion(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

	/*Activar (Conectar) el reloj para el temporizador*/
	RCC->APB1ENR |= TMR2_ON;
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <tim2_modo_comparacion+0x60>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <tim2_modo_comparacion+0x60>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Estableser el valor del prescalador*/
	TIM2->PSC=1600-1;/// Es escribe de esta manera porque se cuenta desde cero.
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	f240 623f 	movw	r2, #1599	; 0x63f
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
	 *                    CLK_SYS  (Reloj del sistema)
	 * Prescalizador  =  ---------
	 *                      PSC    (Valor cargado en el registro PSC*/

	/*Valor de la recarga automatica*/
	TIM2->ARR=10000-1;
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c

	/*El registro ARR es un contador (Progresivo o Regresivo) previo su valor de carga.
	 * Cuando este termina de contar activa una bandera*/

	/*Configuracion de la salida en modo comparación*/
	TIM2->CCMR1 |= OC_TOGLE;
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002e6:	6193      	str	r3, [r2, #24]
	/*Esta habilitación se realiza en el registro CCMR1 bits 4 al seis segun el OCxM donde x
	 * correspnde al canal del timer*/

	/*Habilitación del canal uno del timer2 en modo comparación */
	TIM2->CCER |= CCER_CC1E;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6213      	str	r3, [r2, #32]

	/*Borrar el contador del temporizacor*/
	TIM2->CNT=0;//Borrar el valor acual del contador
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24

	/*Este registro muesta el valor actual del contador*/

	/*Habilita el temporizador*/
	TIM2->CR1 = CR1_CEN;//El registro CR1 es un registro de control
 8000300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000304:	2201      	movs	r2, #1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800

08000318 <Tim3ModoCapturaEntrada>:

void Tim3ModoCapturaEntrada(void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

	/*Activar (Conectar) el reloj para el temporizador*/
	RCC->APB1ENR |= TMR3_ON;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <Tim3ModoCapturaEntrada+0x38>)
 800031e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <Tim3ModoCapturaEntrada+0x38>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6413      	str	r3, [r2, #64]	; 0x40

	/*Estableser el valor del prescalador*/
	TIM3->PSC=160000-1;/// Es escribe de esta manera porque se cuenta desde cero.
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <Tim3ModoCapturaEntrada+0x3c>)
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <Tim3ModoCapturaEntrada+0x40>)
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
	 *                    CLK_SYS  (Reloj del sistema)
	 * Prescalizador  =  ---------
	 *                      PSC    (Valor cargado en el registro PSC*/

	/*Canal uno del TIMER3 en modo de entrada*/
	TIM3->CCMR1 = CC1S;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <Tim3ModoCapturaEntrada+0x3c>)
 8000330:	2201      	movs	r2, #1
 8000332:	619a      	str	r2, [r3, #24]

	/*Captura en el borde asendente*/
	TIM3->CCER |= CC1E;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Tim3ModoCapturaEntrada+0x3c>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a06      	ldr	r2, [pc, #24]	; (8000354 <Tim3ModoCapturaEntrada+0x3c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6213      	str	r3, [r2, #32]

	/*Activación del TIMER3*/

	TIM3->CR1 = CR1_CEN;//El registro CR1 es un registro de control
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <Tim3ModoCapturaEntrada+0x3c>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]

}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40023800 	.word	0x40023800
 8000354:	40000400 	.word	0x40000400
 8000358:	000270ff 	.word	0x000270ff

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff39 	bl	8000204 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000020 	.word	0x20000020

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
